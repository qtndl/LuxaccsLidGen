import gspread_asyncio
import gspread
from google.oauth2.service_account import Credentials
import os

def get_creds():
    creds = Credentials.from_service_account_file(rf'{os.getcwd()}\config\google_keys.json')
    scoped = creds.with_scopes([
        "https://spreadsheets.google.com/feeds",
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ])
    return scoped

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
agcm = gspread_asyncio.AsyncioGspreadClientManager(get_creds)

async def add_record_to_sheet(
    spreadsheet_name: str,
    worksheet_name: str,
    values: list
):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É –∏ –ª–∏—Å—Ç
    –ü–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Ä—è–¥–∫–æ–≤—ã–º –Ω–æ–º–µ—Ä–æ–º

    Args:
        spreadsheet_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ Google —Ç–∞–±–ª–∏—Ü—ã
        worksheet_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ
        values (list): –°–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Å—Ç—Ä–æ–∫—É (–±–µ–∑ –ø–æ—Ä—è–¥–∫–æ–≤–æ–≥–æ –Ω–æ–º–µ—Ä–∞)
    """
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
        agc = await agcm.authorize()

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        spreadsheet = await agc.open(spreadsheet_name)

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—Å—Ç –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            worksheet = await spreadsheet.worksheet(worksheet_name)
        except gspread.exceptions.WorksheetNotFound:
            worksheet = await spreadsheet.add_worksheet(title=worksheet_name, rows=1000, cols=26)
            new_worksheet_values = [
                '–ø/–ø',
                'tg_id',
                '–ö–æ–Ω—Ç–∞–∫—Ç',
                '–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
                '–ó–∞–∫—Ä—ã—Ç',
                '–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç'
            ]
            await worksheet.append_row(new_worksheet_values)


        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ª–∏—Å—Ç–∞
        all_data = await worksheet.get_all_values()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä
        if not all_data:
            # –ï—Å–ª–∏ –ª–∏—Å—Ç –ø—É—Å—Ç–æ–π, –Ω–∞—á–∏–Ω–∞–µ–º —Å 1
            next_number = 1
        else:
            # –ò—â–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –ø–µ—Ä–≤–æ–º —Å—Ç–æ–ª–±—Ü–µ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            max_number = 0
            for i, row in enumerate(all_data):
                if i == 0 and any(cell.strip() for cell in row):
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                    continue
                if row and row[0].isdigit():
                    current_num = int(row[0])
                    if current_num > max_number:
                        max_number = current_num

            next_number = max_number + 1

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        values_with_id = []
        values_with_id.append(next_number)
        for value in values:
            values_with_id.append(value)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
        result = await worksheet.append_row(values_with_id)

        # print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã (ID: {next_number}): {values}")
        return result

    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏: {e}')
        raise

async def find_and_update_by_column_name(
    spreadsheet_name: str,
    worksheet_name: str,
    search_column_name: str,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    search_value: str,
    update_column_name: str,  # –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    new_value: str
) -> bool:
    """
    –ù–∞—Ö–æ–¥–∏—Ç —Å—Ç—Ä–æ–∫—É –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —è—á–µ–π–∫—É –≤ –¥—Ä—É–≥–æ–º —Å—Ç–æ–ª–±—Ü–µ
    –∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –≤–º–µ—Å—Ç–æ –±—É–∫–≤

    Args:
        spreadsheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
        worksheet_name: –ù–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
        search_column_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        search_value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        update_column_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        new_value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏

    Returns:
        bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    try:
        # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É/–ª–∏—Å—Ç
        agc = await agcm.authorize()
        spreadsheet = await agc.open(spreadsheet_name)
        worksheet = await spreadsheet.worksheet(worksheet_name)

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        all_data = await worksheet.get_all_values()

        if not all_data:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞")
            return False

        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        headers = all_data[0]

        # –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å—ã –Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        try:
            search_col_index = headers.index(search_column_name) + 1  # +1 —Ç.–∫. gspread –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ—Ç —Å 1
            update_col_index = headers.index(update_column_name) + 1
        except ValueError as e:
            print(f"‚ùå –°—Ç–æ–ª–±–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
            available_columns = [h for h in headers if h]
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {available_columns}")
            return False

        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å –Ω—É–∂–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å—Ç–æ–ª–±—Ü–µ
        found_row = None
        for row_idx, row in enumerate(all_data[1:], start=2):  # start=2 —Ç.–∫. –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if row_idx - 1 < len(all_data) and search_col_index - 1 < len(row):
                if str(row[search_col_index - 1]).strip() == str(search_value).strip():
                    found_row = row_idx
                    break

        if not found_row:
            print(f"‚ùå –ó–Ω–∞—á–µ–Ω–∏–µ '{search_value}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å—Ç–æ–ª–±—Ü–µ '{search_column_name}'")
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º —è—á–µ–π–∫—É
        await worksheet.update_cell(found_row, update_col_index, new_value)

        # print(f"‚úÖ –°—Ç—Ä–æ–∫–∞ {found_row}, —Å—Ç–æ–ª–±–µ—Ü '{update_column_name}' –æ–±–Ω–æ–≤–ª–µ–Ω: '{new_value}'")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False